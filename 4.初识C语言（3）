5.条件操作符：（三目操作符，有3个操作数）
  
exp1 ? exp2 : exp3   解释：exp1是判断条件；
                     如果exp1为真，执行exp2；如果exp1为假，执行exp3；
                     
                     
int main()
{
    int a = 10;
    int b = 20;
    int max = 0;
    
    max = (a > b ? a : b);
    
    //if (a > b)
    //    max = a;
    //else
    //    max = b;
    return 0;
}

6.逗号表达式：

exp1 ，exp2, exp3,...expN

7.下标引用、函数调用和结构成员
下标引用操作符：[]    
函数调用操作符：()   .    ——>


int Add(int x, int y)
{
    int z = 0;
    z = x + y;
    return z;
}

int main()
{
    //int arr[10] = { 0 };
    //arr[4];   //[]  为下标引用操作符
    int a = 10;
    int b = 20;
    int sum = Add(a, b); //() 为函数调用操作符；
    
    return 0；
}


只要是整数，内存中存储的都是二进制的补码；
正数的原码/反码/补码相同；
负数：原码：直接按照正负；写出二进制序列
     反码：源码的符号位不变；其它位按位取反得到的
     补码：反码 + 1
eg:
-2
10000000000000000000000000000010 ——原码
11111111111111111111111111111101 ——反码
11111111111111111111111111111110 ——补码


8.关键字

auto  break  case  char  const  continue  default  do  double  else  enum
extern  float  for  goto  if  int  long  register  return  short  signed
sizeof  static  struct  switch  typedef  union  unsigned  void  volatile  while

int main()
{
    //register int a = 10;//建议把a定义成寄存器变量。
    int a = 10;
    a = -2;
    //int 定义的变量是有符号的；
    //signed int 等价于 int;
    unsigned int num = 0;//unsigned 定义的是无符号数；即使num = -1; 也会忽略“-”
    
    //struct  —— 结构体关键字
    //union   —— 联合体/共用体
    //typedef  -  类型定义  -  类型重定义
    typedef unsigned int  u_int;//typedef 将类型名unsigned int重新命名为u_int；
    unsigned int num = 20;
    u_int num2 = 20;      //num 与 num2类型是一样的。
 
    return 0;
}
    
    
    
8-2. static（有3种用法）

//static 修饰局部变量，使局部变量的生命周期变长；
//如果没有static，当执行test函数时，a是一个局部变量，a++,a=2。
//局部变量，当进入时，生命周期开始，当执行结束时，生命周期结束，还给系统，即a保持初始值。
void test()
{
    static int a = 1;//当a加上static修饰时，a 是一个静态的局部变量
    a++;
    printf("a = %d\n", a);//a输出是2 3 4 5 6；如果没有static，a的输出是2 2 2 2 2；
}

int main()
{
    int i = 0;
    while (i<5)
    {
        test();
        i++;
     }
     return 0;
}
    
    
    
static 修饰全局变量（127'41）
改变了变量的作用域 - 让静态的全局变量只能在自己所在的源文件内部使用，出了源文件就不能使用了。
    
int main()
{
    //extern - 声明外部符号的
    extern int g_val;
    printf("g_val = %d\n", g_val);
    
    return 0;
}
    

static修饰函数（133'05）
也是改变了函数的作用域（这样的说法不准确）
static 修饰函数改变了函数的链接属性，将外部链接属性——>内部链接属性


//声明外部函数
extern int Add(int, int);

int main()
{
    int a = 10;
    int b = 20;
    int sum = Add(a, b);
    printf("sum = %d\n", sum);
    return 0;
}


8-3. define（140'15）

//#define 定义标识符常亮
//#define MAX 100
//#define 可以定义宏（宏是带参数的）

//函数的实现:
int Max(int x, int y)
{
    if(x > y)
        return x;
    else
        return y;
}

//宏的定义：
#define MAX(X, Y) (X>Y ? X : Y)

int main()
{
    //int a = MAX;
    int a = 10;
    int b = 20;
    //函数的方式：
    int max = MAX(a, b);
    printf("max = %d\n", max);
    //宏的方式：
    max = MAX(a, b);
    //max = (a>b ? a : b);
    printf("max = %d\n", max);
    return 0;
}
    
    
9.指针（147'20）

内存：
内存是电脑上重要的存储器，计算机上所有程序的运行都是在内存中进行的。
所以为了有效使用内存，就把内存划分成一个个小的内存单元，每个内存单元的大小都是1个字节。
为了能够有效访问到内存的每个单元，就给内存单元进行了编号，这些编号被称为该内存单元的地址。

如何产生地址？
32位：32根地址线/数据线。
32位可以产生2^32的地址。
    

int main()
{
   int a = 10;//4个字节
   //&a;//取地址a;
   printf("%p\n", &a);
   
   return 0;
}
    
int main()
{
   int a = 10;//4个字节
   int* p = &a;//取地址a;将a的地址存放在p中，p是指针变量，p的类型是int*。
   printf("%p\n", &a);
   printf("%p\n", p);
   
   //有一种比那辆是用来存放地址的——指针变量
   return 0;
}    





















































