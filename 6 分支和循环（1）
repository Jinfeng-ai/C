# C
学习笔记
# C
学习笔记

C语言是一门结构化的程序设计语言。
1.顺序结构；2.选择结构；3.循环结构；


什么是语句？
C语言中由一个分号；隔开的就是一条语句。

int main()
{
    int a = 0;
    ;//是一条空语句。
    return 0；
}
 

【分支语句】
·if
·switch
【循环语句】
·while
·for
·do while
 
 goto语句
 
【分支语句】
 
语法结构：
if（表达式）                 
      语句；
      
if（表达式）
      语句1；
else
      语句2；
 
//多分支
if(表达式1)
    语句1；
else if(表达式2)
    语句2；
else
    语句3；
 
 
#include <stdio.h>

int main()
{
    int age = 10;
    if(age < 18)
        printf("未成年\n");
     
     return 0;
}
      
int main()
{
    int age = 10;
    if(age < 18)
        printf("未成年\n");
     else
        printf ("成年\n");
     return 0;
}
 
int main()
{
    int age = 10;
    if(age < 18)
        printf("未成年\n");
     else if(age >= 18 && age < 28)
        printf ("青年\n");
     else if(age >= 28 && age < 50)
        printf ("壮年\n");
     return 0;
} 
 
 
C语言中怎么表示真假的？0表示假，非0表示真。 
 
#include <stdio.h>
{
    if(表达式)
    {
        语句列表1；
    }
    else
    {
        语句列表2；
    }
    return 0;
}
 
 
这里的一对{}表示代码块。
 
int main()
{
    int age = 10;
    if(age < 18)
    {
        printf("未成年\n");
        printf("不能谈恋爱\n");
     }
     else if(age >= 18 && age < 28)
        printf ("青年\n");
     else if(age >= 28 && age < 50)
        printf ("壮年\n");
     return 0;
}

【悬空else】
int main()
{
    int a = 0;
    int b = 2;
    if(a == 1)
        if(b == 2)
            printf("hehe\n");
     else
        printf("haha\n");
     return 0;
}

结论：else与最近未匹配的if相匹配。


【if书写形式对比】
//代码1
if(condition){
    return x;
}
return y;

//代码2
if(condition)
{
    return x;
}
else
{
    return y;
}

//代码3
int main()
{
    int num = 4;
    if(num = 5) //"="赋值；"=="是判断相等；
    {
        printf("hehe\n");
    }
    return 0;
}


eg:输出1-100之间的奇数；
#include <stdio.h>
int main()
{
    int i = 1;
    while(i <= 100)
    {
        printf("%d ", i);
        i +=2;
     }
     return 0;
}

int main()
{
    int i = 1;
    while(i <= 100)
    {
        if(i%2 !=0)  //if(i%2 = 1 )
            printf("%d ", i);
        i ++;
     }
     return 0;
}


【switch语句】（53'20）
switch语句也是一种分支语句。常常用于多分支的情况。

#include <stdio.h>
int main()
{
    int day = 0;
    scanf("%d", &day);
    
    if(1 == day)
    printf("星期一\n");
    else if(2 == day)
    printf("星期二\n");
    else if(3 == day)
    printf("星期三\n");
    else if(4 == day)
    printf("星期四\n");
    else if(5 == day)
    printf("星期五\n");
    else if(6 == day)
    printf("星期六\n");
    else if(7 == day)
    printf("星期日\n");
    return 0;
}


【】
switch(整形表达式)
{
    语句项；
}

而语句项是什么呢？是一些case语句。

case 整型常量表达式：
    语句；

#include <stdio.h>
int main()
{
    int day = 0;
    scanf("%d", &day);
    
    switch(day)
    {
    case 1:
        printf("星期一\n");
        break;              //中断
    case 2:
        printf("星期二\n");
        break;
    case 3:
        printf("星期三\n");
        break;
    case 4:
        printf("星期四\n");
        break;
    case 5:
        printf("星期五\n");
        break;
    case 6:
        printf("星期六\n");
        break;
    case 7:
        printf("星期日\n");
        break;
        
    return 0;
}


【结论】case后面不一定非要有break
#include <stdio.h>
int main()
{
    int day = 0;  //整形
    scanf("%d", &day);
    
    switch(day)  //整形表达式
    {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        printf("工作日\n");
        break;
    case 6:
    case 7:
        printf("休息日\n");
        break；    
    return 0;
}


int main()
{
    int day = 0;  //整形
    scanf("%d", &day);
    
    switch(day)  //整形表达式
    {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        printf("工作日\n");
        break;
    case 6:
    case 7:
        printf("休息日\n");
        break；   
    default:
        printf("输入错误\n");
        break;
    return 0;
}

int main()
{
    int day = 0;  //整形
    scanf("%d", &day);
    
    switch(day)  //整形表达式
    {
    case 1:
        if(n == 1)
            printf("hehe\n");//case语句中可以有if语句；
    case 2:
    case 3:
    case 4:
    case 5:
        printf("工作日\n");
        break;
    case 6:
    case 7:
        printf("休息日\n");
        break；   
    default:
        printf("输入错误\n");
        break;
    return 0;
}


【每个switch语句中只能出现一条default子句；
但是他可以出现在语句列表的任何位置，而且语句流会像贯穿一个case标签一样贯穿default子句；
在每个switch语句中都放一条default子句是个好习惯，甚至可以在后面加上break】



int main()
{
    int n = 1;
    int m = 2;
    switch (n)
    {
        case 1: m++;
        case 2: n++;
        case 3: 
            switch (n)
            {//switch允许嵌套使用
            case 1: n++;
            case 2: m++;n++;
            break;
            }
        case 4:m++;
            break;
        default:
            break;
        }
        printf("m = %d, n = %d\n", m, n);
        return 0;
}                























